{"version":3,"sources":["Switch.js","Radios.js","components/ClassComponent.js","components/FuncComponent.js","App.js","components/MemoizedFuncComponent.js","constants.js","reportWebVitals.js","index.js"],"names":["Switch","id","checked","onChange","children","className","type","event","target","htmlFor","Radios","title","options","opts","map","option","value","name","label","ClassComponent","shouldComponentUpdate","prevProps","props","count","onClick","console","log","this","disabled","React","Component","FuncComponent","previousOnClick","areEqual","nextProps","MemoizedFuncComponent","memo","memoTypes","componentTypes","App","useState","setCount","memoType","setMemoType","componentType","setComponentType","countConnected","setCountConnected","onClickConnected","setOnClickConnected","onClickMemoized","useCallback","source","onClickMemoizedWithDependencies","onAppClick","onComponentClick","undefined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ab667aa.chunk.js","sourcesContent":["import \"./App.css\";\n\nconst Switch = ({ id, checked, onChange, children }) => {\n    return (\n        <div className=\"switch\">\n            <input\n                id={id}\n                type=\"checkbox\"\n                checked={checked}\n                onChange={(event) => onChange(event.target.checked)}\n            ></input>\n            <label htmlFor={id}>{children}</label>\n        </div>\n    );\n};\n\nexport default Switch;\n","import \"./App.css\";\n\nconst Radios = ({ id, title, checked, onChange, options = [] }) => {\n    const opts = options.map((option) => (\n        <div key={option.value} className=\"radio\">\n            <input\n                type=\"radio\"\n                id={option.value}\n                value={option.value}\n                name={id}\n                checked={option.value === checked}\n                onChange={() => onChange(option.value)}\n            />\n            <label htmlFor={option.value}>{option.label}</label>\n        </div>\n    ));\n\n    return (\n        <div className=\"radios\">\n            <div className=\"title\">{title}</div>\n            {opts}\n        </div>\n    );\n};\n\nexport default Radios;\n","import React from \"react\";\nimport \"./Component.css\";\n\nexport default class ClassComponent extends React.Component {\n    /**\n     * *shouldComponentUpdate* is a way to specify if render() method should execute.\n     * It should return *true* if components should update (i.e. if checked props are NOT the same).\n     */\n    shouldComponentUpdate = (prevProps) => {\n        return this.props.count !== prevProps.count || this.props.onClick !== prevProps.onClick;\n    };\n\n    render() {\n        console.log(\"Component render\", this.props);\n\n        return (\n            <div>\n                <div className=\"component class\">\n                    <div className=\"label\">Count: {this.props.count}</div>\n                    <button className=\"button\" onClick={this.props.onClick} disabled={!this.props.onClick}>\n                        Component button\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","import \"./Component.css\";\n\n/**\n * With functional component, there is no way to prevent render (since the function is a render method itself).\n * Even if component is completely disconnected (no props are being passed in), it will render.\n */\nfunction FuncComponent(props) {\n    console.log(\"Component render\", props);\n\n    return (\n        <div>\n            <div className=\"component func\">\n                <div className=\"label\">Count: {props.count}</div>\n                <button className=\"button\" onClick={props.onClick} disabled={!props.onClick}>\n                    Component button\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default FuncComponent;\n","import { useState, useCallback } from \"react\";\nimport Switch from \"./Switch\";\nimport Radios from \"./Radios\";\nimport ClassComponent from \"./components/ClassComponent\";\nimport FuncComponent from \"./components/FuncComponent\";\nimport MemoizedFuncComponent from \"./components/MemoizedFuncComponent\";\nimport { memoTypes, componentTypes } from \"./constants\";\nimport \"./App.css\";\n\n// saving the previous onClick handler reference\nlet previousOnClick;\n\nfunction App() {\n    console.log(\"App render\");\n    const [count, setCount] = useState(0);\n\n    const [memoType, setMemoType] = useState(\"with-deps\");\n    const [componentType, setComponentType] = useState(\"func-memo\");\n    const [countConnected, setCountConnected] = useState(true);\n    const [onClickConnected, setOnClickConnected] = useState(true);\n\n    // non-memoized version\n    const onClickNonMemoized = (source) => {\n        console.log(source, \"onClick\");\n        setCount(count + 1);\n    };\n\n    // memoized version, created only once (no dependencies)\n    const onClickMemoized = useCallback((source) => {\n        console.log(source, \"onClick (memoized, no dependencies)\");\n        setCount(count + 1);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    // memoized version, recreated when count changes\n    const onClickMemoizedWithDependencies = useCallback(\n        (source) => {\n            console.log(source, \"onClick (memoized, with dependencies)\");\n            setCount(count + 1);\n        },\n        [count]\n    );\n\n    //const onClick = memoized ? onClickMemoized : onClickNonMemoized;\n\n    let onClick;\n\n    switch (memoType) {\n        case \"none\":\n            onClick = onClickNonMemoized;\n            break;\n        case \"no-deps\":\n            onClick = onClickMemoized;\n            break;\n        default:\n            // with-deps\n            onClick = onClickMemoizedWithDependencies;\n            break;\n    }\n\n    const onAppClick = useCallback(() => onClick(\"App\"), [onClick]);\n    const onComponentClick = useCallback(() => onClick(\"Component\"), [onClick]);\n\n    console.log(\"onComponentClick changed\", previousOnClick !== onComponentClick);\n    previousOnClick = onComponentClick;\n\n    let Component;\n\n    switch (componentType) {\n        case \"class\":\n            Component = ClassComponent;\n            break;\n        case \"func\":\n            Component = FuncComponent;\n            break;\n        default:\n            // func-memo\n            Component = MemoizedFuncComponent;\n            break;\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"label\">Count: {count}</div>\n            <button className=\"button\" onClick={onAppClick}>\n                App button\n            </button>\n            <div className=\"switches\">\n                <Switch id=\"count\" checked={countConnected} onChange={setCountConnected}>\n                    Connect <i>count</i>\n                </Switch>\n                <Switch id=\"click\" checked={onClickConnected} onChange={setOnClickConnected}>\n                    Connect <i>onClick</i>\n                </Switch>\n            </div>\n            <Component count={countConnected ? count : \"-\"} onClick={onClickConnected ? onComponentClick : undefined} />\n            <div>\n                <Radios\n                    id=\"memo\"\n                    title=\"Callback type:\"\n                    options={memoTypes}\n                    checked={memoType}\n                    onChange={setMemoType}\n                />\n                <Radios\n                    id=\"component\"\n                    title=\"Component type:\"\n                    options={componentTypes}\n                    checked={componentType}\n                    onChange={setComponentType}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport \"./Component.css\";\n\nconst areEqual = (prevProps, nextProps) =>\n    prevProps.count === nextProps.count && prevProps.onClick === nextProps.onClick;\n\n/**\n * By wrapping a functional component with React.memo, we can prevent the unnecessary execution.\n * 2nd parameter of React.memo is a function which returns TRUE if nothing changed.\n * Note: This is different than shouldComponentUpdate with class component, which returns FALSE if nothing changed.\n * if 2nd parameter is ommited, the component will be rendered only once.\n *\n * Important: *React.memo* is not the same as *React.useMemo* hook!\n * React.memo is a higher order component.\n * @see https://reactjs.org/docs/react-api.html#reactmemo\n */\nconst MemoizedFuncComponent = React.memo(function FuncComponent(props) {\n    console.log(\"Component render\", props);\n\n    return (\n        <div>\n            <div className=\"component func-memoized\">\n                <div className=\"label\">Count: {props.count}</div>\n                <button className=\"button\" onClick={props.onClick} disabled={!props.onClick}>\n                    Component button\n                </button>\n            </div>\n        </div>\n    );\n}, areEqual);\n\nexport default MemoizedFuncComponent;\n","export const memoTypes = [\n    {\n        value: \"none\",\n        label: \"Non-memoized\",\n    },\n    {\n        value: \"no-deps\",\n        label: \"Memoized with no dependencies\",\n    },\n    {\n        value: \"with-deps\",\n        label: \"Memoized with dependencies\",\n    },\n];\n\nexport const componentTypes = [\n    {\n        value: \"class\",\n        label: \"Class component\",\n    },\n    {\n        value: \"func\",\n        label: \"Functional component\",\n    },\n    {\n        value: \"func-memo\",\n        label: \"Memoized functional component\",\n    },\n];\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}